from tdigest import TDigest
import numpy as np

def digest_generator(dimensions:int): 
        """
        Function to generate TDigest() methods recursively depending on the number of PCA Components selected
        """
        if dimensions == 3 or dimensions == 4: 
            dim_methods = [None]*dimensions

            for dim in range(len(dim_methods)):
                dim_methods[dim] = TDigest()
            
            return dim_methods
        else:
                raise ValueError(f"PCA_N_COMPONENTS can only be 3 or 4 and is {dimensions}")
            
    
def get_percentiles(digestion_methods: list, step_size:float):
    """
    Get percentiles for every PCA Component.
    params: list with all the TDigest methods -should be 3 or 4-
    """
    percentiles = []
    for i in range(len(digestion_methods)):
        for step in np.arange(0, 100, step_size):
            digestion_methods[i].percentile(step)    

    return percentiles 

lista = digest_generator(int(4))

percentiles = get_percentiles(lista, 3.5)



# percentile = [-27.35844682314861, -11.552637117637659, -8.387531468577931, -7.046477759111977, -6.358494911919781, -5.682300796056624, -5.257495435631384, -4.863167198136102, -4.3997982663365836, -3.9070321343486225, -3.4352472444879654, -2.8732452779740703, -2.177351771743919, -1.4822882566638673, -0.8014775868996535, -0.24638321812696276, 0.24701207512884316, 0.7153517535972854, 1.1163531353779892, 1.4869372865930337, 1.8926285417619706, 2.3462625554170637, 2.7098713478777996, 3.0738606634418972, 3.543470500530702, 4.109759143080208, 4.669456815304665, 5.392299222061231, 6.205816368054295, 7.143853947660391, 8.195860145333738, 9.880693254379505, -11.814297289373506, -5.990467743767095, -4.956885412425425, -4.20386443148765, -3.671395034130507, -3.187601940422497, -2.7442905526126418, -2.379006344256418, -2.055448039073525, -1.7327485671792902, -1.4119235590940904, -1.1124888848263874, -0.8342103814829078, -0.5687255653454131, -0.29988119349642267, -0.021463042042152755, 0.25856384430242774, 0.5293114110189275, 0.7931587381483933, 1.0674896144569277, 1.3316995495217159, 1.6352923714160934, 1.9415304556001585, 2.2370469245558877, 2.521748583474412, 2.861302799450933, 3.277576514832142, 3.6752249022642456, 4.073030932775968, 4.6760712685875, 5.352354822046023, 6.377742345101169, -12.906133747083611, -5.734169948887683, -4.860199284711686, -4.262565504547932, -3.7804583796228353, -3.386097442688989, -3.031256105945828, -2.705951134673286, -2.4020784564554583, -2.1235409280922215, -1.856299375255212, -1.597819946276279, -1.3475938917793946, -1.1099091872397355, -0.8698633963161204, -0.6333482274487106, -0.39514680204013053, -0.16368289534122035, 0.0676959983932582, 0.30360499606703945, 0.549463389518072, 0.7957369562510339, 1.054777275253728, 1.3206138176343836, 1.603844670809146, 1.9062431290945185, 2.236046775425618, 2.5994250827147036, 3.032906106834544, 3.5478793754048614, 4.208051326665537, 5.220331968646602, -11.795926550056357, -3.3441119966258834, -2.5162507417574638, -2.0223964192157697, -1.6552006989176231, -1.359349548801814, -1.1041125388733497, -0.8797176265332576, -0.6775940217474199, -0.4927658730923525, -0.3199835762367359, -0.15670586864858702, 0.0008958665388351884, 0.15262562085744139, 0.30171541669657786, 0.4483581284208262, 0.5958283014413379, 0.7422165013830035, 0.8916201801082284, 1.0405136566941382, 1.1910775610278115, 1.3439192292553857, 1.501235713382001, 1.666212971309953, 1.8421277324640302, 2.02966382155913, 2.2359102436204683, 2.4677941172362954, 2.7331057129605285, 3.0459623368442825, 3.434639009547505, 4.005219301850426]